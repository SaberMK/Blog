#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Blog.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BlogDB")]
	public partial class BlogModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    partial void InsertArticles(Articles instance);
    partial void UpdateArticles(Articles instance);
    partial void DeleteArticles(Articles instance);
    partial void InsertCommentaries(Commentaries instance);
    partial void UpdateCommentaries(Commentaries instance);
    partial void DeleteCommentaries(Commentaries instance);
    partial void InsertRatings(Ratings instance);
    partial void UpdateRatings(Ratings instance);
    partial void DeleteRatings(Ratings instance);
    partial void InsertTags(Tags instance);
    partial void UpdateTags(Tags instance);
    partial void DeleteTags(Tags instance);
    partial void InsertTagsAndArticles(TagsAndArticles instance);
    partial void UpdateTagsAndArticles(TagsAndArticles instance);
    partial void DeleteTagsAndArticles(TagsAndArticles instance);
    #endregion
		
		public BlogModelDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["BlogDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BlogModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BlogModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BlogModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BlogModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
		
		public System.Data.Linq.Table<Articles> Articles
		{
			get
			{
				return this.GetTable<Articles>();
			}
		}
		
		public System.Data.Linq.Table<Commentaries> Commentaries
		{
			get
			{
				return this.GetTable<Commentaries>();
			}
		}
		
		public System.Data.Linq.Table<Ratings> Ratings
		{
			get
			{
				return this.GetTable<Ratings>();
			}
		}
		
		public System.Data.Linq.Table<Tags> Tags
		{
			get
			{
				return this.GetTable<Tags>();
			}
		}
		
		public System.Data.Linq.Table<TagsAndArticles> TagsAndArticles
		{
			get
			{
				return this.GetTable<TagsAndArticles>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _Email;
		
		private string _Login;
		
		private string _Password;
		
		private System.DateTime _BirthDate;
		
		private string _About;
		
		private EntitySet<Articles> _Articles;
		
		private EntitySet<Commentaries> _Commentaries;
		
		private EntitySet<Ratings> _Ratings;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnBirthDateChanging(System.DateTime value);
    partial void OnBirthDateChanged();
    partial void OnAboutChanging(string value);
    partial void OnAboutChanged();
    #endregion
		
		public Users()
		{
			this._Articles = new EntitySet<Articles>(new Action<Articles>(this.attach_Articles), new Action<Articles>(this.detach_Articles));
			this._Commentaries = new EntitySet<Commentaries>(new Action<Commentaries>(this.attach_Commentaries), new Action<Commentaries>(this.detach_Commentaries));
			this._Ratings = new EntitySet<Ratings>(new Action<Ratings>(this.attach_Ratings), new Action<Ratings>(this.detach_Ratings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="Date NOT NULL")]
		public System.DateTime BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_About", DbType="NVarChar(300)")]
		public string About
		{
			get
			{
				return this._About;
			}
			set
			{
				if ((this._About != value))
				{
					this.OnAboutChanging(value);
					this.SendPropertyChanging();
					this._About = value;
					this.SendPropertyChanged("About");
					this.OnAboutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Articles", Storage="_Articles", ThisKey="UserId", OtherKey="AuthorId")]
		public EntitySet<Articles> Articles
		{
			get
			{
				return this._Articles;
			}
			set
			{
				this._Articles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Commentaries", Storage="_Commentaries", ThisKey="UserId", OtherKey="AuthorId")]
		public EntitySet<Commentaries> Commentaries
		{
			get
			{
				return this._Commentaries;
			}
			set
			{
				this._Commentaries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Ratings", Storage="_Ratings", ThisKey="UserId", OtherKey="AuthorId")]
		public EntitySet<Ratings> Ratings
		{
			get
			{
				return this._Ratings;
			}
			set
			{
				this._Ratings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Articles(Articles entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Articles(Articles entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_Commentaries(Commentaries entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Commentaries(Commentaries entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_Ratings(Ratings entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Ratings(Ratings entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Articles")]
	public partial class Articles : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ArticleId;
		
		private int _AuthorId;
		
		private string _Title;
		
		private string _Content;
		
		private System.DateTime _DateTime;
		
		private EntitySet<Commentaries> _Commentaries;
		
		private EntitySet<Ratings> _Ratings;
		
		private EntitySet<TagsAndArticles> _TagsAndArticles;
		
		private EntityRef<Users> _Users;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArticleIdChanging(int value);
    partial void OnArticleIdChanged();
    partial void OnAuthorIdChanging(int value);
    partial void OnAuthorIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnDateTimeChanging(System.DateTime value);
    partial void OnDateTimeChanged();
    #endregion
		
		public Articles()
		{
			this._Commentaries = new EntitySet<Commentaries>(new Action<Commentaries>(this.attach_Commentaries), new Action<Commentaries>(this.detach_Commentaries));
			this._Ratings = new EntitySet<Ratings>(new Action<Ratings>(this.attach_Ratings), new Action<Ratings>(this.detach_Ratings));
			this._TagsAndArticles = new EntitySet<TagsAndArticles>(new Action<TagsAndArticles>(this.attach_TagsAndArticles), new Action<TagsAndArticles>(this.detach_TagsAndArticles));
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArticleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ArticleId
		{
			get
			{
				return this._ArticleId;
			}
			set
			{
				if ((this._ArticleId != value))
				{
					this.OnArticleIdChanging(value);
					this.SendPropertyChanging();
					this._ArticleId = value;
					this.SendPropertyChanged("ArticleId");
					this.OnArticleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorId", DbType="Int NOT NULL")]
		public int AuthorId
		{
			get
			{
				return this._AuthorId;
			}
			set
			{
				if ((this._AuthorId != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorId = value;
					this.SendPropertyChanged("AuthorId");
					this.OnAuthorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(2000) NOT NULL", CanBeNull=false)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTime", DbType="DateTime NOT NULL")]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Articles_Commentaries", Storage="_Commentaries", ThisKey="ArticleId", OtherKey="ArticleId")]
		public EntitySet<Commentaries> Commentaries
		{
			get
			{
				return this._Commentaries;
			}
			set
			{
				this._Commentaries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Articles_Ratings", Storage="_Ratings", ThisKey="ArticleId", OtherKey="ArticleId")]
		public EntitySet<Ratings> Ratings
		{
			get
			{
				return this._Ratings;
			}
			set
			{
				this._Ratings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Articles_TagsAndArticles", Storage="_TagsAndArticles", ThisKey="ArticleId", OtherKey="ArticleId")]
		public EntitySet<TagsAndArticles> TagsAndArticles
		{
			get
			{
				return this._TagsAndArticles;
			}
			set
			{
				this._TagsAndArticles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Articles", Storage="_Users", ThisKey="AuthorId", OtherKey="UserId", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Articles.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Articles.Add(this);
						this._AuthorId = value.UserId;
					}
					else
					{
						this._AuthorId = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Commentaries(Commentaries entity)
		{
			this.SendPropertyChanging();
			entity.Articles = this;
		}
		
		private void detach_Commentaries(Commentaries entity)
		{
			this.SendPropertyChanging();
			entity.Articles = null;
		}
		
		private void attach_Ratings(Ratings entity)
		{
			this.SendPropertyChanging();
			entity.Articles = this;
		}
		
		private void detach_Ratings(Ratings entity)
		{
			this.SendPropertyChanging();
			entity.Articles = null;
		}
		
		private void attach_TagsAndArticles(TagsAndArticles entity)
		{
			this.SendPropertyChanging();
			entity.Articles = this;
		}
		
		private void detach_TagsAndArticles(TagsAndArticles entity)
		{
			this.SendPropertyChanging();
			entity.Articles = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Commentaries")]
	public partial class Commentaries : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommentaryId;
		
		private int _AuthorId;
		
		private int _ArticleId;
		
		private string _Content;
		
		private System.DateTime _DateTime;
		
		private EntityRef<Users> _Users;
		
		private EntityRef<Articles> _Articles;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommentaryIdChanging(int value);
    partial void OnCommentaryIdChanged();
    partial void OnAuthorIdChanging(int value);
    partial void OnAuthorIdChanged();
    partial void OnArticleIdChanging(int value);
    partial void OnArticleIdChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnDateTimeChanging(System.DateTime value);
    partial void OnDateTimeChanged();
    #endregion
		
		public Commentaries()
		{
			this._Users = default(EntityRef<Users>);
			this._Articles = default(EntityRef<Articles>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentaryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommentaryId
		{
			get
			{
				return this._CommentaryId;
			}
			set
			{
				if ((this._CommentaryId != value))
				{
					this.OnCommentaryIdChanging(value);
					this.SendPropertyChanging();
					this._CommentaryId = value;
					this.SendPropertyChanged("CommentaryId");
					this.OnCommentaryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorId", DbType="Int NOT NULL")]
		public int AuthorId
		{
			get
			{
				return this._AuthorId;
			}
			set
			{
				if ((this._AuthorId != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorId = value;
					this.SendPropertyChanged("AuthorId");
					this.OnAuthorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArticleId", DbType="Int NOT NULL")]
		public int ArticleId
		{
			get
			{
				return this._ArticleId;
			}
			set
			{
				if ((this._ArticleId != value))
				{
					if (this._Articles.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArticleIdChanging(value);
					this.SendPropertyChanging();
					this._ArticleId = value;
					this.SendPropertyChanged("ArticleId");
					this.OnArticleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTime", DbType="DateTime NOT NULL")]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Commentaries", Storage="_Users", ThisKey="AuthorId", OtherKey="UserId", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Commentaries.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Commentaries.Add(this);
						this._AuthorId = value.UserId;
					}
					else
					{
						this._AuthorId = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Articles_Commentaries", Storage="_Articles", ThisKey="ArticleId", OtherKey="ArticleId", IsForeignKey=true)]
		public Articles Articles
		{
			get
			{
				return this._Articles.Entity;
			}
			set
			{
				Articles previousValue = this._Articles.Entity;
				if (((previousValue != value) 
							|| (this._Articles.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Articles.Entity = null;
						previousValue.Commentaries.Remove(this);
					}
					this._Articles.Entity = value;
					if ((value != null))
					{
						value.Commentaries.Add(this);
						this._ArticleId = value.ArticleId;
					}
					else
					{
						this._ArticleId = default(int);
					}
					this.SendPropertyChanged("Articles");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ratings")]
	public partial class Ratings : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RatingId;
		
		private int _AuthorId;
		
		private int _ArticleId;
		
		private int _Amount;
		
		private EntityRef<Articles> _Articles;
		
		private EntityRef<Users> _Users;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRatingIdChanging(int value);
    partial void OnRatingIdChanged();
    partial void OnAuthorIdChanging(int value);
    partial void OnAuthorIdChanged();
    partial void OnArticleIdChanging(int value);
    partial void OnArticleIdChanged();
    partial void OnAmountChanging(int value);
    partial void OnAmountChanged();
    #endregion
		
		public Ratings()
		{
			this._Articles = default(EntityRef<Articles>);
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RatingId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RatingId
		{
			get
			{
				return this._RatingId;
			}
			set
			{
				if ((this._RatingId != value))
				{
					this.OnRatingIdChanging(value);
					this.SendPropertyChanging();
					this._RatingId = value;
					this.SendPropertyChanged("RatingId");
					this.OnRatingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorId", DbType="Int NOT NULL")]
		public int AuthorId
		{
			get
			{
				return this._AuthorId;
			}
			set
			{
				if ((this._AuthorId != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorId = value;
					this.SendPropertyChanged("AuthorId");
					this.OnAuthorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArticleId", DbType="Int NOT NULL")]
		public int ArticleId
		{
			get
			{
				return this._ArticleId;
			}
			set
			{
				if ((this._ArticleId != value))
				{
					if (this._Articles.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArticleIdChanging(value);
					this.SendPropertyChanging();
					this._ArticleId = value;
					this.SendPropertyChanged("ArticleId");
					this.OnArticleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int NOT NULL")]
		public int Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Articles_Ratings", Storage="_Articles", ThisKey="ArticleId", OtherKey="ArticleId", IsForeignKey=true)]
		public Articles Articles
		{
			get
			{
				return this._Articles.Entity;
			}
			set
			{
				Articles previousValue = this._Articles.Entity;
				if (((previousValue != value) 
							|| (this._Articles.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Articles.Entity = null;
						previousValue.Ratings.Remove(this);
					}
					this._Articles.Entity = value;
					if ((value != null))
					{
						value.Ratings.Add(this);
						this._ArticleId = value.ArticleId;
					}
					else
					{
						this._ArticleId = default(int);
					}
					this.SendPropertyChanged("Articles");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Ratings", Storage="_Users", ThisKey="AuthorId", OtherKey="UserId", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Ratings.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Ratings.Add(this);
						this._AuthorId = value.UserId;
					}
					else
					{
						this._AuthorId = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tags")]
	public partial class Tags : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TagId;
		
		private string _Tag;
		
		private EntitySet<TagsAndArticles> _TagsAndArticles;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTagIdChanging(int value);
    partial void OnTagIdChanged();
    partial void OnTagChanging(string value);
    partial void OnTagChanged();
    #endregion
		
		public Tags()
		{
			this._TagsAndArticles = new EntitySet<TagsAndArticles>(new Action<TagsAndArticles>(this.attach_TagsAndArticles), new Action<TagsAndArticles>(this.detach_TagsAndArticles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TagId
		{
			get
			{
				return this._TagId;
			}
			set
			{
				if ((this._TagId != value))
				{
					this.OnTagIdChanging(value);
					this.SendPropertyChanging();
					this._TagId = value;
					this.SendPropertyChanged("TagId");
					this.OnTagIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tag", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this.OnTagChanging(value);
					this.SendPropertyChanging();
					this._Tag = value;
					this.SendPropertyChanged("Tag");
					this.OnTagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tags_TagsAndArticles", Storage="_TagsAndArticles", ThisKey="TagId", OtherKey="TagId")]
		public EntitySet<TagsAndArticles> TagsAndArticles
		{
			get
			{
				return this._TagsAndArticles;
			}
			set
			{
				this._TagsAndArticles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TagsAndArticles(TagsAndArticles entity)
		{
			this.SendPropertyChanging();
			entity.Tags = this;
		}
		
		private void detach_TagsAndArticles(TagsAndArticles entity)
		{
			this.SendPropertyChanging();
			entity.Tags = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TagsAndArticles")]
	public partial class TagsAndArticles : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TagAndArticleId;
		
		private int _ArticleId;
		
		private int _TagId;
		
		private EntityRef<Articles> _Articles;
		
		private EntityRef<Tags> _Tags;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTagAndArticleIdChanging(int value);
    partial void OnTagAndArticleIdChanged();
    partial void OnArticleIdChanging(int value);
    partial void OnArticleIdChanged();
    partial void OnTagIdChanging(int value);
    partial void OnTagIdChanged();
    #endregion
		
		public TagsAndArticles()
		{
			this._Articles = default(EntityRef<Articles>);
			this._Tags = default(EntityRef<Tags>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagAndArticleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TagAndArticleId
		{
			get
			{
				return this._TagAndArticleId;
			}
			set
			{
				if ((this._TagAndArticleId != value))
				{
					this.OnTagAndArticleIdChanging(value);
					this.SendPropertyChanging();
					this._TagAndArticleId = value;
					this.SendPropertyChanged("TagAndArticleId");
					this.OnTagAndArticleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArticleId", DbType="Int NOT NULL")]
		public int ArticleId
		{
			get
			{
				return this._ArticleId;
			}
			set
			{
				if ((this._ArticleId != value))
				{
					if (this._Articles.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArticleIdChanging(value);
					this.SendPropertyChanging();
					this._ArticleId = value;
					this.SendPropertyChanged("ArticleId");
					this.OnArticleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagId", DbType="Int NOT NULL")]
		public int TagId
		{
			get
			{
				return this._TagId;
			}
			set
			{
				if ((this._TagId != value))
				{
					if (this._Tags.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTagIdChanging(value);
					this.SendPropertyChanging();
					this._TagId = value;
					this.SendPropertyChanged("TagId");
					this.OnTagIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Articles_TagsAndArticles", Storage="_Articles", ThisKey="ArticleId", OtherKey="ArticleId", IsForeignKey=true)]
		public Articles Articles
		{
			get
			{
				return this._Articles.Entity;
			}
			set
			{
				Articles previousValue = this._Articles.Entity;
				if (((previousValue != value) 
							|| (this._Articles.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Articles.Entity = null;
						previousValue.TagsAndArticles.Remove(this);
					}
					this._Articles.Entity = value;
					if ((value != null))
					{
						value.TagsAndArticles.Add(this);
						this._ArticleId = value.ArticleId;
					}
					else
					{
						this._ArticleId = default(int);
					}
					this.SendPropertyChanged("Articles");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tags_TagsAndArticles", Storage="_Tags", ThisKey="TagId", OtherKey="TagId", IsForeignKey=true)]
		public Tags Tags
		{
			get
			{
				return this._Tags.Entity;
			}
			set
			{
				Tags previousValue = this._Tags.Entity;
				if (((previousValue != value) 
							|| (this._Tags.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tags.Entity = null;
						previousValue.TagsAndArticles.Remove(this);
					}
					this._Tags.Entity = value;
					if ((value != null))
					{
						value.TagsAndArticles.Add(this);
						this._TagId = value.TagId;
					}
					else
					{
						this._TagId = default(int);
					}
					this.SendPropertyChanged("Tags");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
